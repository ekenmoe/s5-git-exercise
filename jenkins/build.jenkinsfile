pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = "your-docker-hub-account/your-docker-repo"
        SSH_KEY_CREDENTIALS = "your-ec2-ssh-credentials-id"
        EC2_INSTANCE_IP = "your-ec2-instance-ip"
    }
    
    stages {
        stage('Build Docker Image') {
            steps {
                git 'https://github.com/tia12/s5-git-exercise.git'
                sh 'docker build -t ${DOCKER_REGISTRY}:${BUILD_NUMBER} .'
            }
        }
        
        stage('Push Docker Image') {
            steps {
                withDockerRegistry(credentialsId: 'docker-hub-credentials', url: '') {
                    sh 'docker push ${DOCKER_REGISTRY}:${BUILD_NUMBER}'
                }
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                script {
                    // Copy the SSH private key to the Jenkins agent
                    withCredentials([sshUserPrivateKey(credentialsId: "${SSH_KEY_CREDENTIALS}", keyFileVariable: 'SSH_KEY')]) {
                        // SSH commands to deploy the image on EC2
                        sh "scp -i ${SSH_KEY} -o StrictHostKeyChecking=no -r ./code ec2-user@${EC2_INSTANCE_IP}:~"
                        sh "ssh -i ${SSH_KEY} -o StrictHostKeyChecking=no ec2-user@${EC2_INSTANCE_IP} 'docker stop my-httpd-container || true'"
                        sh "ssh -i ${SSH_KEY} -o StrictHostKeyChecking=no ec2-user@${EC2_INSTANCE_IP} 'docker rm my-httpd-container || true'"
                        sh "ssh -i ${SSH_KEY} -o StrictHostKeyChecking=no ec2-user@${EC2_INSTANCE_IP} 'docker pull ${DOCKER_REGISTRY}:${BUILD_NUMBER}'"
                        sh "ssh -i ${SSH_KEY} -o StrictHostKeyChecking=no ec2-user@${EC2_INSTANCE_IP} 'docker run -d -p 80:${port} --name my-httpd-container ${DOCKER_REGISTRY}:${BUILD_NUMBER}'"
                    }
                }
            }
        }
    }
}

